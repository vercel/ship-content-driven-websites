/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type CustomComponents = Array<
  | ({
      _key: string
    } & Hero)
  | ({
      _key: string
    } & SpotlightHeader)
  | ({
      _key: string
    } & GridHighlight)
>

export type GridHighlight = {
  _type: 'gridHighlight'
  cards?: Array<{
    title?: string
    description?: string
    bullets?: Array<{
      text?: string
      _key: string
    }>
    cta?: {
      label?: string
      link?: string
    }
    _key: string
  }>
}

export type CtaLink = {
  _type: 'ctaLink'
  label?: string
  url?: string
}

export type SpotlightHeader = {
  _type: 'spotlightHeader'
  spotlight?: string
  title?: string
  description?: string
  fill?: string
}

export type Hero = {
  _type: 'hero'
  header?: {
    title?: string
    description?: string
  }
  products?: Array<{
    title?: string
    link?: string
    thumbnail?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    _key: string
  }>
}

export type MetadataPage = {
  _type: 'metadata-page'
  title?: string
  description?: string
  applicationName?: string
  authors?: Array<string>
  generator?: string
  keywords?: Array<string>
  referrer?:
    | 'no-referrer'
    | 'no-referrer-when-downgrade'
    | 'origin'
    | 'origin-when-cross-origin'
    | 'same-origin'
    | 'strict-origin'
    | 'strict-origin-when-cross-origin'
  themeColor?: Array<string>
  colorScheme?:
    | 'normal'
    | 'light'
    | 'dark'
    | 'light dark'
    | 'dark light'
    | 'only light'
  viewport?: {
    width?: number
    height?: number
    initialScale?: number
    minimumScale?: number
    maximumScale?: number
    userScalable?: boolean
    viewportFit?: 'auto' | 'cover' | 'contain'
    interactiveWidget?:
      | 'resizes-visual'
      | 'resizes-content'
      | 'overlays-content'
  }
  creator?: string
  publisher?: string
  robots?: Array<string>
  alternates?: {
    canonical?: string
    languages?: Array<string>
    media?: Array<string>
    type?: string
  }
  icons?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  body?: CustomComponents
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Duration = {
  _type: 'duration'
  start?: string
  end?: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  menuItems?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
  >
  name?: string
  github?: string
  twitter?: string
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  metadataBase?: {
    title?: string
    description?: string
    keywords?: Array<string>
    authors?: Array<{
      name?: string
      url?: string
      _key: string
    }>
    publisher?: string
    opengraph?: {
      title?: string
      description?: string
      type?: string
      siteName?: string
    }
  }
  body?: CustomComponents
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: homePageQuery
// Query:   *[_type == "home"][0]{    _id,    overview,    body,    title,    metadataBase,  }
export type HomePageQueryResult = {
  _id: string
  overview: null
  body: CustomComponents | null
  title: null
  metadataBase: {
    title?: string
    description?: string
    keywords?: Array<string>
    authors?: Array<{
      name?: string
      url?: string
      _key: string
    }>
    publisher?: string
    opengraph?: {
      title?: string
      description?: string
      type?: string
      siteName?: string
    }
  } | null
} | null
// Variable: pagesBySlugQuery
// Query:   *[_type == "page" && slug.current == $slug][0] {    _id,    body,    description,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = {
  _id: string
  body: CustomComponents | null
  description: string | null
  title: string | null
  slug: string | null
} | null
// Variable: settingsQuery
// Query:   *[_type == "settings"][0]{    footer,    menuItems[]->{      _type,      "slug": slug.current,      title    },    github,    twitter,    name,  }
export type SettingsQueryResult = {
  footer: null
  menuItems: Array<
    | {
        _type: 'home'
        slug: null
        title: null
      }
    | {
        _type: 'page'
        slug: string | null
        title: string | null
      }
  > | null
  github: string | null
  twitter: string | null
  name: string | null
} | null
